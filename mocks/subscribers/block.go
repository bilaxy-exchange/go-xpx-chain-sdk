// Code generated by mockery v1.0.0. DO NOT EDIT.

// Copyright 2019 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package subscribers

import mock "github.com/stretchr/testify/mock"
import subscribers "github.com/bilaxy-exchange/go-xpx-chain-sdk/sdk/websocket/subscribers"

// Block is an autogenerated mock type for the Block type
type Block struct {
	mock.Mock
}

// AddHandlers provides a mock function with given fields: handlers
func (_m *Block) AddHandlers(handlers ...subscribers.BlockHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...subscribers.BlockHandler) error); ok {
		r0 = rf(handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHandlers provides a mock function with given fields:
func (_m *Block) GetHandlers() map[*subscribers.BlockHandler]struct{} {
	ret := _m.Called()

	var r0 map[*subscribers.BlockHandler]struct{}
	if rf, ok := ret.Get(0).(func() map[*subscribers.BlockHandler]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*subscribers.BlockHandler]struct{})
		}
	}

	return r0
}

// HasHandlers provides a mock function with given fields:
func (_m *Block) HasHandlers() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveHandlers provides a mock function with given fields: handlers
func (_m *Block) RemoveHandlers(handlers ...*subscribers.BlockHandler) (bool, error) {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...*subscribers.BlockHandler) bool); ok {
		r0 = rf(handlers...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*subscribers.BlockHandler) error); ok {
		r1 = rf(handlers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
